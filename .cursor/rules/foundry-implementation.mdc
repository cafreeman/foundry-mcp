---
globs: ['src/**/*.rs', 'tests/**/*.rs']
---

# Foundry Implementation Patterns

## CLI Command Structure

### Standard Pattern

```rust
// All commands: async fn execute(args: XxxArgs) -> Result<XxxResponse>
pub async fn execute(args: CreateProjectArgs) -> Result<CreateProjectResponse> {
    validate_args(&args).context("Invalid arguments")?;
    let result = perform_operation(&args).context("Operation failed")?;
    Ok(build_response(result))
}
```

### Response Format (REQUIRED)

```rust
#[derive(Serialize, Debug)]
pub struct CommandResponse {
    // Core data (project, spec, etc.)
    pub next_steps: Vec<String>,        // REQUIRED: Workflow guidance
    pub validation_status: String,      // REQUIRED: "complete", "partial", "failed"

    #[serde(skip_serializing_if = "Option::is_none")]
    pub workflow_hints: Option<Vec<String>>,  // OPTIONAL: LLM guidance
}
```

## Error Handling

### Context Pattern

```rust
use anyhow::{Context, Result};

// Add meaningful context to all operations
std::fs::create_dir_all(&project_dir)
    .context(format!("Failed to create project directory: {}", project_dir.display()))?;

// Validate early, fail fast
validate_project_name(&args.project_name)
    .context("Invalid project name format")?;
```

### Validation Functions

```rust
pub fn validate_project_name(name: &str) -> Result<()> {
    if name.is_empty() || !name.chars().all(|c| c.is_alphanumeric() || c == '-' || c == '_') {
        anyhow::bail!("Project name must use kebab-case (alphanumeric and hyphens only)");
    }
    Ok(())
}
```

## User Memory Compliance

### Function Returns (Memory #7066344)

- **ONLY** return what's needed - avoid unused return values
- Use `#[serde(skip_serializing_if = "Option::is_none")]` for optional fields
- Focus responses on immediate workflow needs

### Content Creation (Memory #7065075)

- **NEVER** implement automatic content generation or summarization
- **ALWAYS** require LLMs to provide complete content as arguments
- CLI validates format and length, but NOT content quality

```rust
// ✅ Good: LLM provides content
pub struct CreateProjectArgs {
    pub project_name: String,
    pub vision: String,      // LLM-provided content
    pub tech_stack: String,  // LLM-provided content
}

// ❌ Bad: CLI generates content
pub fn generate_summary_from_vision(vision: &str) -> String {
    // Never implement this
}
```

## Testing Strategy

### Test Organization

- Unit tests: `#[cfg(test)] mod tests` in each module
- Integration tests: `tests/` directory
- Shared utilities: `src/test_utils.rs`

### Standard Test Pattern

```rust
#[cfg(test)]
mod tests {
    use super::*;
    use crate::test_utils::TestFoundryEnv;

    #[tokio::test]
    async fn test_command_success() {
        let env = TestFoundryEnv::new().unwrap();
        let args = create_test_args();

        let result = execute(args).await;

        assert!(result.is_ok());
        let response = result.unwrap();
        assert_eq!(response.validation_status, "complete");
        assert!(!response.next_steps.is_empty());
    }
}
```

### Test Coverage Requirements

- All CLI commands and workflows
- Error conditions and validation rules
- JSON response structure validation
- File system operations with temporary directories

## File System Operations

### Path Management

- All operations through `foundry_dir()` utility
- Use `tempfile::TempDir` for test isolation
- Validate directories exist before operations
- Projects in `~/.foundry/PROJECT_NAME/`
- Specs use `YYYYMMDD_HHMMSS_feature_name` format

### Error Messages

- Use clear, actionable language with specific field names
- Include examples for format violations
- Suggest corrective actions

```rust
anyhow::bail!("Project name '{}' contains invalid characters. Use kebab-case: lowercase letters, numbers, and hyphens only", name);
```

## Development Priorities

1. **CLI functionality first** - Build and validate core features
2. **MCP server second** - Expose CLI functionality through MCP tools
3. **Maintain identical functionality** between CLI and MCP interfaces
4. **JSON responses** for both CLI and future MCP server
5. **Workflow guidance** in responses for LLM decision-making
