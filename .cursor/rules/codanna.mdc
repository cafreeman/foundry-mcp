---
alwaysApply: true
---

# Codanna MCP Tools - Primary Code Exploration Method

## CRITICAL: Use Codanna Tools for ALL Code Analysis

When any request involves understanding, exploring, or analyzing code:

1. **ALWAYS start with Codanna tools** before using grep/read_file
2. **Use semantic search first** - it's more powerful than text-based search
3. **Chain tools together** to build complete understanding
4. **Only fall back to basic tools** if Codanna doesn't provide results

## Required Tool Usage Patterns

### üîç EXPLORATION TRIGGERS

**Use Codanna tools when user asks:**

- "How does [feature] work?"
- "Where is [concept] implemented?"
- "What calls/uses [function]?"
- "Find all [pattern] in the code"
- "Analyze impact of changing [symbol]"
- "Understand [architectural concept]"

### üöÄ STANDARD WORKFLOW

**Always follow this sequence:**

1. **Start Investigation**: `mcp_codanna_get_index_info` (understand scope)
2. **Find Concepts**: `mcp_codanna_semantic_search_docs` (natural language search)
3. **Locate Symbols**: `mcp_codanna_find_symbol` or `mcp_codanna_search_symbols` (exact/fuzzy search)
4. **Map Relationships**: `mcp_codanna_get_calls` + `mcp_codanna_find_callers` (dependencies)
5. **Assess Impact**: `mcp_codanna_analyze_impact` (change planning)

### üéØ TOOL SELECTION LOGIC

**For conceptual questions** ‚Üí `mcp_codanna_semantic_search_docs`

- "authentication flow", "error handling patterns", "validation logic"

**For specific symbols** ‚Üí `mcp_codanna_find_symbol`

- Known function/struct/trait names

**For fuzzy exploration** ‚Üí `mcp_codanna_search_symbols`

- Partial names, exploring patterns, filtering by type

**For understanding behavior** ‚Üí `mcp_codanna_get_calls`

- "What does this function do internally?"

**For impact analysis** ‚Üí `mcp_codanna_find_callers` + `mcp_codanna_analyze_impact`

- "What would break if I change this?"

## MANDATORY Usage Rules

### ‚úÖ DO THIS:

- **Start EVERY code exploration** with `mcp_codanna_get_index_info`
- **Use semantic search with descriptive queries**: "HTTP request parsing with validation"
- **Chain tools**: semantic_search ‚Üí find_symbol ‚Üí get_calls ‚Üí find_callers
- **Use lower thresholds (0.3-0.4)** for broader semantic search results
- **Explain your tool choices** to the user

### ‚ùå NEVER DO THIS:

- Start with grep/read_file when exploring unfamiliar code
- Use single-word semantic searches ("auth", "config")
- Skip relationship analysis (get_calls/find_callers)
- Stop after first tool - always build complete picture

## Essential Tool Chaining Patterns

### Pattern 1: Feature Understanding

**When user asks: "How does authentication work?"**

1. `semantic_search_docs` ‚Üí Find feature implementation concepts
2. `find_symbol` ‚Üí Get exact symbol details from search results
3. `get_calls` ‚Üí Understand what the function does internally
4. `find_callers` ‚Üí See how/where it's used in the codebase

### Pattern 2: Impact Analysis

**When user asks: "What happens if I change this function?"**

1. `find_symbol` ‚Üí Locate the exact symbol
2. `analyze_impact` ‚Üí Get full dependency graph with max_depth=3
3. `find_callers` ‚Üí Verify all usage patterns
4. `semantic_search_docs` ‚Üí Find related patterns that might break

### Pattern 3: Architecture Exploration

**When user asks: "How is error handling implemented?"**

1. `get_index_info` ‚Üí Understand codebase scope and languages
2. `semantic_search_with_context` ‚Üí Find architectural patterns with context
3. `search_symbols` ‚Üí Explore related components (kind="function", query="error")
4. **Repeat relationship analysis** on key findings with get_calls/find_callers

### Pattern 4: Debugging & Troubleshooting

**When user asks: "Why is this function being called?"**

1. `find_symbol` ‚Üí Confirm function location and signature
2. `find_callers` ‚Üí See all direct callers
3. `analyze_impact` ‚Üí Get broader call chain context
4. `semantic_search_docs` ‚Üí Find documentation explaining purpose

## Effective Query Strategies

### Semantic Search Best Practices

**Be descriptive and specific:**

‚úÖ **Good**: "HTTP request parsing with validation and error handling"
‚ùå **Avoid**: "request parsing"

‚úÖ **Good**: "database connection pool initialization with retry logic"
‚ùå **Avoid**: "database connection"

‚úÖ **Good**: "user authentication middleware with session management"
‚ùå **Avoid**: "auth middleware"

### Tool Parameters Guide

- **For broader results** ‚Üí Use lower thresholds (0.3-0.4) in semantic search
- **For precise matches** ‚Üí Use higher thresholds (0.7+) in semantic search
- **For exploration** ‚Üí Use `search_symbols` with `kind` filter (function, struct, trait)
- **For impact assessment** ‚Üí Use `analyze_impact` with `max_depth=3` for comprehensive analysis

### Troubleshooting No Results

- **Lower semantic search threshold** (try 0.3-0.4)
- **Broaden search terms** ("auth" ‚Üí "user authentication flow")
- **Use fuzzy search_symbols** instead of exact find_symbol
- **Try different vocabulary** (domain terms vs technical terms)

## Quick Reference

### Essential Tool Commands:

```
mcp_codanna_get_index_info                    # Always start here
mcp_codanna_semantic_search_docs query="..."  # Concept discovery
mcp_codanna_find_symbol name="..."            # Exact symbol lookup
mcp_codanna_search_symbols query="..."        # Fuzzy symbol search
mcp_codanna_get_calls function_name="..."     # What function calls
mcp_codanna_find_callers function_name="..."  # What calls function
mcp_codanna_analyze_impact symbol_name="..."  # Change impact analysis
```

### Response Template:

1. **Investigation Plan**: "I'll use [tools] to explore [concept]"
2. **Tool Execution**: Execute tools with clear reasoning
3. **Key Findings**: Symbol locations, relationships, similarity scores
4. **Relationship Map**: Call graphs and dependencies
5. **Actionable Insights**: What this means for the user's goals

## Remember: Codanna First, Everything Else Second

These tools provide semantic understanding and relationship mapping that basic text search cannot match. Use them as your primary exploration method.
