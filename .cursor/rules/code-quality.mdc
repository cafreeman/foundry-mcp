---
description: 'Rust Code Quality & 2025 Best Practices - Core quality standards, code organization, error handling, performance considerations, testing, and documentation guidelines'
globs: ['**/*.rs', '**/Cargo.toml', '**/Cargo.lock']
alwaysApply: true
priority: high
tags: ['rust', 'quality', 'best-practices', 'testing', 'documentation']
---

# Rust Code Quality & 2025 Best Practices

## Core Quality Standards

- Follow Rust 2024 edition features and latest idioms
- Maintain high code quality with comprehensive testing
- Use modern Rust patterns and avoid deprecated approaches

## Code Organization

- Keep functions small and focused on single responsibility
- Use meaningful variable and function names
- Prefer composition over inheritance
- Use modules to organize related functionality

## Error Handling

- Use `Result<T, E>` for fallible operations
- Prefer `?` operator over manual error handling
- Use `Option<T>` for nullable values
- Avoid panics in library code

## Performance Considerations

- Minimize allocations and cloning
- Use references (`&`) when possible
- Prefer iterators over manual loops
- Use appropriate data structures for the use case

## Testing

- Write unit tests for all public functions
- Use integration tests for complex workflows
- Test error conditions and edge cases
- Maintain high test coverage

## Documentation

- Document all public APIs with doc comments
- Include examples in documentation
- Keep documentation up-to-date with code changes
- Use clear and concise language
