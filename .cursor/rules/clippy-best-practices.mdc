---
description: 'Rust Clippy Best Practices - Configuration, key lints, development workflow, and quality gates for maintaining functional programming style'
globs: ['**/*.rs', '**/Cargo.toml', '**/.cargo/config.toml']
alwaysApply: true
priority: high
tags: ['rust', 'clippy', 'linting', 'functional', 'best-practices']
---

# Rust Clippy Best Practices

## Clippy Configuration & Usage

### 1. Required Configuration

- Enable strict Clippy lints for functional style
- Use `#![deny(clippy::all)]` in lib.rs/main.rs
- Configure `.cargo/config.toml` for consistent Clippy usage

### 2. Key Lints to Enable

- `clippy::redundant_clone` - Prevent unnecessary cloning
- `clippy::map_flatten` - Encourage functional chaining
- `clippy::manual_ok_or` - Use functional Option/Result methods
- `clippy::option_if_let_else` - Prefer functional patterns
- `clippy::redundant_closure` - Avoid unnecessary closures

### 3. Development Workflow

- **ALWAYS** run `cargo clippy` before committing
- **ALWAYS** run `cargo clippy -- -D warnings` in CI/CD
- Fix all Clippy warnings before proceeding with new features

### 4. Quality Gates

- All code must pass `cargo clippy -- -D warnings`
- No `mut` variables unless absolutely necessary
- All functions should be pure when possible
- Use functional iterator methods for all collection operations

## Implementation Priority

1. **IMMEDIATE**: Add Clippy configuration and fix existing warnings
2. **HIGH**: Refactor formatting.rs to use functional patterns
3. **MEDIUM**: Apply functional patterns to other modules
4. **ONGOING**: Maintain functional style in all new code
